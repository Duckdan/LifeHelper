package com.study.yang.lifehelper.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.study.yang.lifehelper.db.weather;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEATHER".
*/
public class weatherDao extends AbstractDao<weather, Long> {

    public static final String TABLENAME = "WEATHER";

    /**
     * Properties of entity weather.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Daytime = new Property(1, String.class, "daytime", false, "DAYTIME");
        public final static Property Day_weather_code = new Property(2, Integer.class, "day_weather_code", false, "DAY_WEATHER_CODE");
        public final static Property Day_weather = new Property(3, String.class, "day_weather", false, "DAY_WEATHER");
        public final static Property Day_wind_power = new Property(4, String.class, "day_wind_power", false, "DAY_WIND_POWER");
        public final static Property Day_weather_pic = new Property(5, String.class, "day_weather_pic", false, "DAY_WEATHER_PIC");
        public final static Property Day_air_temperature = new Property(6, String.class, "day_air_temperature", false, "DAY_AIR_TEMPERATURE");
        public final static Property Day_wind_direction = new Property(7, String.class, "day_wind_direction", false, "DAY_WIND_DIRECTION");
        public final static Property Night_weather_code = new Property(8, Integer.class, "night_weather_code", false, "NIGHT_WEATHER_CODE");
        public final static Property Night_weather = new Property(9, String.class, "night_weather", false, "NIGHT_WEATHER");
        public final static Property Night_wind_power = new Property(10, String.class, "night_wind_power", false, "NIGHT_WIND_POWER");
        public final static Property Night_air_temperature = new Property(11, String.class, "night_air_temperature", false, "NIGHT_AIR_TEMPERATURE");
        public final static Property Night_weather_pic = new Property(12, String.class, "night_weather_pic", false, "NIGHT_WEATHER_PIC");
        public final static Property Night_wind_direction = new Property(13, String.class, "night_wind_direction", false, "NIGHT_WIND_DIRECTION");
    };


    public weatherDao(DaoConfig config) {
        super(config);
    }
    
    public weatherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DAYTIME\" TEXT," + // 1: daytime
                "\"DAY_WEATHER_CODE\" INTEGER," + // 2: day_weather_code
                "\"DAY_WEATHER\" TEXT," + // 3: day_weather
                "\"DAY_WIND_POWER\" TEXT," + // 4: day_wind_power
                "\"DAY_WEATHER_PIC\" TEXT," + // 5: day_weather_pic
                "\"DAY_AIR_TEMPERATURE\" TEXT," + // 6: day_air_temperature
                "\"DAY_WIND_DIRECTION\" TEXT," + // 7: day_wind_direction
                "\"NIGHT_WEATHER_CODE\" INTEGER," + // 8: night_weather_code
                "\"NIGHT_WEATHER\" TEXT," + // 9: night_weather
                "\"NIGHT_WIND_POWER\" TEXT," + // 10: night_wind_power
                "\"NIGHT_AIR_TEMPERATURE\" TEXT," + // 11: night_air_temperature
                "\"NIGHT_WEATHER_PIC\" TEXT," + // 12: night_weather_pic
                "\"NIGHT_WIND_DIRECTION\" TEXT);"); // 13: night_wind_direction
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, weather entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String daytime = entity.getDaytime();
        if (daytime != null) {
            stmt.bindString(2, daytime);
        }
 
        Integer day_weather_code = entity.getDay_weather_code();
        if (day_weather_code != null) {
            stmt.bindLong(3, day_weather_code);
        }
 
        String day_weather = entity.getDay_weather();
        if (day_weather != null) {
            stmt.bindString(4, day_weather);
        }
 
        String day_wind_power = entity.getDay_wind_power();
        if (day_wind_power != null) {
            stmt.bindString(5, day_wind_power);
        }
 
        String day_weather_pic = entity.getDay_weather_pic();
        if (day_weather_pic != null) {
            stmt.bindString(6, day_weather_pic);
        }
 
        String day_air_temperature = entity.getDay_air_temperature();
        if (day_air_temperature != null) {
            stmt.bindString(7, day_air_temperature);
        }
 
        String day_wind_direction = entity.getDay_wind_direction();
        if (day_wind_direction != null) {
            stmt.bindString(8, day_wind_direction);
        }
 
        Integer night_weather_code = entity.getNight_weather_code();
        if (night_weather_code != null) {
            stmt.bindLong(9, night_weather_code);
        }
 
        String night_weather = entity.getNight_weather();
        if (night_weather != null) {
            stmt.bindString(10, night_weather);
        }
 
        String night_wind_power = entity.getNight_wind_power();
        if (night_wind_power != null) {
            stmt.bindString(11, night_wind_power);
        }
 
        String night_air_temperature = entity.getNight_air_temperature();
        if (night_air_temperature != null) {
            stmt.bindString(12, night_air_temperature);
        }
 
        String night_weather_pic = entity.getNight_weather_pic();
        if (night_weather_pic != null) {
            stmt.bindString(13, night_weather_pic);
        }
 
        String night_wind_direction = entity.getNight_wind_direction();
        if (night_wind_direction != null) {
            stmt.bindString(14, night_wind_direction);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public weather readEntity(Cursor cursor, int offset) {
        weather entity = new weather( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // daytime
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // day_weather_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // day_weather
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // day_wind_power
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // day_weather_pic
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // day_air_temperature
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // day_wind_direction
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // night_weather_code
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // night_weather
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // night_wind_power
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // night_air_temperature
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // night_weather_pic
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // night_wind_direction
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, weather entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDaytime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDay_weather_code(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDay_weather(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDay_wind_power(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDay_weather_pic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDay_air_temperature(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDay_wind_direction(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNight_weather_code(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setNight_weather(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNight_wind_power(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNight_air_temperature(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNight_weather_pic(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNight_wind_direction(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(weather entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(weather entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
